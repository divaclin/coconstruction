// Generated by CoffeeScript 1.9.0
(function() {
  $(function() {
    var $radian, Audio, Controller, DB, DEVICE_ID, LAZY_SECONDS, NOTI_TIME, Notification, NotificationController, RATE, Status, Timer, audio, db, lib, main, notificationController;
    audio = void 0;
    $('title').text('沉浸式投影');
    $radian = $("#radian");
    $radian.addClass("full");
    $radian.html("<div id=\"audios\">\n  <audio id=\"liveInAudio\">\n    <source src=\"audio/liveIn.mp3\" type=\"audio/mpeg\">Your browser does not support the audio tag.\n  </audio>\n  <audio id=\"buildUpAudio\">\n    <source src=\"audio/buildUp.mp3\" type=\"audio/mpeg\">Your browser does not support the audio tag.\n  </audio>\n</div>\n\n<div id=\"notiContainer\" class=\"full\">\n  <div id=\"liveInModal\" class=\"notiModal animated full \">\n    <div class=\"inner\"></div>\n  </div>\n  <div id=\"buildUpModal\" class=\"notiModal animated full\">\n    <div class=\"inner\"></div>\n  </div>\n</div>");
    lib = {
      getParameterByName: function(name) {
        var regex, results;
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        results = regex.exec(location.search);
        if (results === null) {
          return '';
        } else {
          return decodeURIComponent(results[1].replace(/\+/g, ' '));
        }
      }
    };
    DEVICE_ID = 'F';
    localStorage['deviceid'] = DEVICE_ID;
    LAZY_SECONDS = 10;
    RATE = 2000;
    NOTI_TIME = 10000;
    Controller = (function() {
      var db, init, notificationController, _includeCss, _isLazy, _track, _trackCallback;

      db = void 0;

      notificationController = void 0;

      $radian = $("#radian");

      _includeCss = function() {
        var head, link;
        head = document.getElementsByTagName('head')[0];
        link = document.createElement('link');
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = 'css/project.css';
        link.media = 'all';
        return head.appendChild(link);
      };

      init = function() {
        return _includeCss();
      };

      function Controller(_NotificationController, _db) {
        var main;
        db = _db;
        notificationController = _NotificationController;
        this.building = void 0;
        main = this;
        init();
      }

      _track = function() {
        return db.track(_trackCallback).fail(function() {
          console.log('trace_fail , continuing');
          return setTimeout(_track, RATE);
        });
      };

      _isLazy = function() {
        var d;
        d = new Date();
        return ((d.getTime() - _lastMoveTime) / 1000) > LAZY_SECONDS;
      };

      _trackCallback = function(data) {
        var noti, status, _i, _len;
        console.log("tracked.", data);
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          status = data[_i];
          status = new Status(status);
          if ((status.isCHECK_IN() || status.isBUILD_UP()) && (!status.isRead())) {
            if ((typeof projectUpdate !== "undefined" && projectUpdate !== null) && (status.isBUILD_UP() || status.isCHECK_IN())) {
              projectUpdate();
            } else {
              console.warn('projectUpdate not exist');
            }
            noti = new Notification(status);
            notificationController.comming(noti);
            db.markReadStatus(status);
            console.log("coming status : ", status);
          }
        }
        return setTimeout(_track, RATE);
      };

      Controller.prototype.track = function() {
        console.log("start tracking");
        return setTimeout(_track, RATE);
      };

      Controller.prototype.busy = function() {
        var d, _lastMoveTime;
        d = new Date();
        return _lastMoveTime = d.getTime();
      };

      Controller.prototype.wait = function() {};

      Controller.prototype.isLazy = function() {
        return _isLazy();
      };

      Controller.prototype.addStatus = function(data, callback) {
        return db.addStatus(data, callback);
      };

      return Controller;

    })();
    Status = (function() {
      var comingData, thisStatus;

      thisStatus = void 0;

      comingData = void 0;

      function Status(data) {
        var attrname, e, test;
        thisStatus = this;
        comingData = data;
        for (attrname in data) {
          this[attrname] = data[attrname];
        }
        if (!this.isBUILDING()) {
          try {
            test = JSON.parse(this.object);
          } catch (_error) {
            e = _error;
            console.log(e, data);
            test = {
              bid: "1",
              bname: "映山華廈",
              uname: "有使用者"
            };
          }
          this.object_real = test;
        }
        this["event"] = this.getEvent();
      }

      Status.prototype.isRead = function() {
        if (this.done) {
          return this.done.indexOf(DEVICE_ID) >= 0;
        } else {
          return false;
        }
      };

      Status.prototype.isSelf = function() {
        return this.device === DEVICE_ID;
      };

      Status.prototype.isPad = function() {
        return this.device === "A" || this.device === "B" || this.device === "C";
      };

      Status.prototype.isDesk = function() {
        return this.device === "D";
      };

      Status.prototype.isProject = function() {
        return this.device === "E";
      };

      Status.prototype.isNull = function() {
        return this.device !== "A" && this.device !== "B" && this.device !== "C" && this.device !== "D" && this.device !== "E" && this.device !== "F";
      };

      Status.prototype.isCHECK_IN = function() {
        return this.behavior === "LIVE_IN";
      };

      Status.prototype.isLOOK_UP = function() {
        return this.behavior === "LOOK_UP";
      };

      Status.prototype.isBUILDING = function() {
        return this.behavior === "BUILD_UP";
      };

      Status.prototype.isBUILD_UP = function() {
        return this.behavior === "BUILD_UP_after";
      };

      Status.prototype.isBUILD_UP_RETURN = function() {
        return this.behavior === "BUILD_UP_return";
      };

      Status.prototype.liveTime = function() {
        var d, o;
        o = new Date(this.time);
        d = new Date();
        return Math.ceil((d.getTime() - o.getTime()) / 1000);
      };

      Status.prototype.getEvent = function() {
        if (this.isNull()) {
          return "DeviceNull";
        }
        if (this.isSelf()) {
          return "self";
        }
        if (this.isPad()) {
          if (this.isBUILDING()) {
            return "otherPad.building";
          }
          if (this.isBUILD_UP()) {
            return "otherPad.buildUp";
          }
          if (this.isCHECK_IN()) {
            return "otherPad.liveIn";
          }
          if (this.isLOOK_UP()) {
            if (this.object_type === "B") {
              return "otherPad.lookUp.building";
            }
            if (this.object_type === "T") {
              return "otherPad.lookUp.type";
            }
            if (this.object_type === "G") {
              return "otherPad.lookUp.tag";
            }
          }
        } else if (this.isDesk()) {
          if (this.isLOOK_UP()) {
            return "desk.lookUp";
          }
          if (this.isBUILD_UP_RETURN()) {
            return "desk.building";
          }
        } else {
          console.log(comingData, "unsolve");
          return "unsolve";
        }
      };

      return Status;

    })();
    DB = (function() {
      function DB() {}

      DB.prototype.pull = function(url, callback) {
        return $.get(url, callback).fail(function(j, s, e) {
          return console.log(j.responseText, s, e);
        });
      };

      DB.prototype.push = function(url, data, callback) {
        return $.post(url, data).done(callback);
      };

      DB.prototype.clearStatus = function(match, callback) {
        if (!callback) {
          callback = function() {};
        }
        console.log(callback);
        if (!match) {
          return this.push("data/clearStatus.php", {
            device: DEVICE_ID
          }, function(data, textStatus) {
            callback();
            return console.log(data, textStatus, "Status of " + DEVICE_ID + " is deleted.");
          });
        } else if (match.statusid) {
          return this.push("data/clearStatus.php", {
            statusid: match.statusid
          }, function(data, textStatus) {}, callback(), console.log(textStatus, "Status " + status.statusid + " is deleted."));
        }
      };

      DB.prototype.markReadStatus = function(status) {
        var data;
        data = {
          done: DEVICE_ID,
          statusid: status.statusid
        };
        return this.push("data/updateStatus.php", data, function() {
          return console.log("Status " + status.statusid + " is mark read.");
        });
      };

      DB.prototype.addStatus = function(data, callback) {
        var lc, lco, _addStatus;
        lco = JSON.parse(data.object);
        lc = 0;
        switch (data.object_type) {
          case "T":
            lc = lco.cid;
            break;
          case "B":
            lc = lco.bid;
            break;
          case "G":
            lc = lco.gid;
            break;
          default:
            console.log("Rn.expect object_type,now set oid to 1");
        }
        console.log(lc, lco);
        _addStatus = function() {
          return this.push("data/addStatus.php", {
            deviceid: DEVICE_ID,
            behavior: data.behavior,
            object_type: data.object_type,
            object: data.object,
            oid: lc,
            time: new Date()
          }, function() {
            if (callback) {
              callback();
            }
            return console.log("" + data.behavior);
          });
        };
        return this.clearStatus().success(_addStatus.bind(this));
      };

      DB.prototype.buildUp = function(object, callback) {
        if (object) {
          return this.addStatus({
            behavior: "BUILD_UP"
          }, callback);
        }
      };

      DB.prototype.buildUpAfter = function() {
        this.push("data/buildUp.php", object, callback);
        return this.addStatus({
          behavior: "BUILD_UP_after",
          object_type: "B",
          object: object
        }, callback);
      };

      DB.prototype.buildUpPre = function(callback) {
        return this.addStatus({
          behavior: "BUILD_UP_pre"
        }, callback);
      };

      DB.prototype.checkIn = function(object, callback) {
        this.push("data/checkIn.php", {
          object: object,
          object_type: "B",
          user: user_id
        }, callback);
        return this.addStatus({
          behavior: "CHECK_IN",
          object_type: "B",
          object: object
        }, callback);
      };

      DB.prototype.lookUp = function(data, callback) {
        return this.addStatus(data, callback);
      };

      DB.prototype.track = function(callback) {
        return this.pull("data/pullStatus.php", callback);
      };

      return DB;

    })();
    Notification = (function() {
      var THIS, status;

      THIS = void 0;

      status = void 0;

      Notification.prototype.getNotiStructure = function() {
        var noti;
        noti = THIS.getData(status);
        return "<a class=\"noti animated fadeIn\">\n  <p class=\"" + noti[1] + "\">" + noti[0] + "</p>\n  <span class='close'></span>\n</a>";
      };

      Notification.prototype.getNotiTextStructure = function() {
        var str;
        if (status.isCHECK_IN()) {
          str = "入住了";
        } else if (status.isBUILD_UP()) {
          str = "建造了";
        }
        return "<p class=\"name \"><span class=\"coYellow\">" + (status.object_real.uname != null ? status.object_real.uname : "有使用者") + "</span></br>\n<span class=\"msg\">" + str + "<span class=\"bname\">" + status.object_real.bname + "</span></p>";
      };

      function Notification(_status) {
        THIS = this;
        status = _status;
        this.status = _status;
        status.objString = this.object2String(status);
        status.href = this.getHref(status);
      }

      Notification.prototype.getData = function(status) {
        var id, padStr, url;
        id = status.device;
        url = status.href;
        padStr = "<span class=\"" + id + "\">平板" + id + "</span>";
        switch (status.event) {
          case "otherPad.buildUp":
            return [padStr + "建造了！", "from" + id + " toLookUp building", url];
          case "otherPad.liveIn":
            return [padStr + "入住了" + status.objString, "from" + id + " toLookUp building", url];
          default:
            console.log(status);
            return ["無", "hidden", "url"];
        }
      };

      Notification.prototype.object2String = function(status) {
        var span;
        span = function(name) {
          return "<br>「<span class=\"highlight\">" + name + "</span>」";
        };
        console.log(status.object_real);
        switch (status.object_type) {
          case "B":
            return "建築:" + (span(status.object_real.bname));
          case "T":
            return "建築類型:" + (span(status.object_real.tname));
          case "G":
            return "建築標籤:" + (span(status.object_real.gname));
        }
      };

      Notification.prototype.getHref = function(status) {
        var href;
        href = "";
        switch (status.object_type) {
          case "B":
            href = "page=infoA&bid=" + status.object_real.bid;
            break;
          case "T":
            href = "page=infoB&cid=" + status.object_real.cid;
            break;
          case "G":
            href = "page=infoC&gid=" + status.object_real.gid;
        }
        if (href.length > 0) {
          return href;
        }
      };

      return Notification;

    })();
    Audio = (function() {
      var $buildUp, $liveIn;

      $liveIn = void 0;

      $buildUp = void 0;

      function Audio() {
        $liveIn = $('#liveInAudio');
        $buildUp = $('#buildUpAudio');
      }

      Audio.prototype.liveIn = function() {
        return $liveIn[0].play();
      };

      Audio.prototype.buildUp = function() {
        return $buildUp[0].play();
      };

      return Audio;

    })();
    Timer = (function() {
      var remaining, start, timerId;

      timerId = void 0;

      start = void 0;

      remaining = void 0;

      function Timer(callback, delay) {
        remaining = delay;
        this.resume();
      }

      Timer.pause = function() {
        window.clearTimeout(timerId);
        remaining -= new Date - start;
      };

      Timer.resume = function() {
        start = new Date;
        window.clearTimeout(timerId);
        timerId = window.setTimeout(callback, remaining);
      };

      return Timer;

    })();
    NotificationController = (function() {
      var $buildUpModal, $liveInModal, $notiContainer, THIS, isNotifying, notiArr;

      THIS = void 0;

      notiArr = [];

      isNotifying = false;

      $notiContainer = void 0;

      $liveInModal = void 0;

      $buildUpModal = void 0;

      function NotificationController() {
        THIS = this;
        $liveInModal = $("#liveInModal");
        $buildUpModal = $("#buildUpModal");
      }

      NotificationController.prototype.comming = function(noti) {
        if (!isNotifying) {
          if (noti.status.isCHECK_IN()) {
            $liveInModal.find('.inner').html(noti.getNotiTextStructure());
            isNotifying = true;
            $liveInModal.fadeIn(function() {
              return audio.liveIn();
            });
            return setTimeout(function() {
              return $liveInModal.fadeOut(function() {
                isNotifying = false;
                return THIS.next();
              });
            }, NOTI_TIME);
          } else if (noti.status.isBUILD_UP()) {
            $buildUpModal.find('.inner').html(noti.getNotiTextStructure());
            isNotifying = true;
            $buildUpModal.fadeIn(function() {
              return audio.buildUp();
            });
            return setTimeout(function() {
              return $buildUpModal.fadeOut(function() {
                isNotifying = false;
                return THIS.next();
              });
            }, NOTI_TIME);
          }
        } else {
          return THIS.add(noti);
        }
      };

      NotificationController.prototype.next = function() {
        var nextNoti;
        if ((!isNotifying) && notiArr.length > 0) {
          nextNoti = notiArr.shift();
          return THIS.comming(nextNoti);
        }
      };

      NotificationController.prototype.add = function(noti) {
        return notiArr.push(noti);
      };

      return NotificationController;

    })();
    this.Notification = Notification;
    this.DB = DB;
    this.Controller = Controller;
    this.Status = Status;
    audio = new Audio();
    notificationController = new NotificationController();
    db = new DB();
    main = new Controller(notificationController, db);
    return main.track();
  });

}).call(this);
